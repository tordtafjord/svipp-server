// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: shopify_api_config.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createShopifyApiKey = `-- name: CreateShopifyApiKey :one
INSERT INTO shopify_api_config (api_key, quote_key, business_id,
                                pickup_address, pickup_coords, pickup_instructions,
                                pickup_window_start, pickup_window_end)
VALUES ($1, $2, $3, $4,
        $5, $6, $7, $8)
RETURNING business_id, pickup_address, pickup_coords, pickup_instructions, pickup_window_start, pickup_window_end
`

type CreateShopifyApiKeyParams struct {
	ApiKey             string             `json:"apiKey"`
	QuoteKey           string             `json:"quoteKey"`
	BusinessID         int64              `json:"businessId"`
	PickupAddress      *string            `json:"pickupAddress"`
	PickupCoords       interface{}        `json:"pickupCoords"`
	PickupInstructions *string            `json:"pickupInstructions"`
	PickupWindowStart  pgtype.Timestamptz `json:"pickupWindowStart"`
	PickupWindowEnd    pgtype.Timestamptz `json:"pickupWindowEnd"`
}

type CreateShopifyApiKeyRow struct {
	BusinessID         int64              `json:"businessId"`
	PickupAddress      *string            `json:"pickupAddress"`
	PickupCoords       interface{}        `json:"pickupCoords"`
	PickupInstructions *string            `json:"pickupInstructions"`
	PickupWindowStart  pgtype.Timestamptz `json:"pickupWindowStart"`
	PickupWindowEnd    pgtype.Timestamptz `json:"pickupWindowEnd"`
}

func (q *Queries) CreateShopifyApiKey(ctx context.Context, arg CreateShopifyApiKeyParams) (CreateShopifyApiKeyRow, error) {
	row := q.db.QueryRow(ctx, createShopifyApiKey,
		arg.ApiKey,
		arg.QuoteKey,
		arg.BusinessID,
		arg.PickupAddress,
		arg.PickupCoords,
		arg.PickupInstructions,
		arg.PickupWindowStart,
		arg.PickupWindowEnd,
	)
	var i CreateShopifyApiKeyRow
	err := row.Scan(
		&i.BusinessID,
		&i.PickupAddress,
		&i.PickupCoords,
		&i.PickupInstructions,
		&i.PickupWindowStart,
		&i.PickupWindowEnd,
	)
	return i, err
}

const getApiKeyInfo = `-- name: GetApiKeyInfo :one
SELECT business_id, pickup_address, pickup_coords, pickup_instructions, pickup_window_start, pickup_window_end
FROM shopify_api_config WHERE api_key = $1 AND deleted_at IS NULL
`

type GetApiKeyInfoRow struct {
	BusinessID         int64              `json:"businessId"`
	PickupAddress      *string            `json:"pickupAddress"`
	PickupCoords       interface{}        `json:"pickupCoords"`
	PickupInstructions *string            `json:"pickupInstructions"`
	PickupWindowStart  pgtype.Timestamptz `json:"pickupWindowStart"`
	PickupWindowEnd    pgtype.Timestamptz `json:"pickupWindowEnd"`
}

func (q *Queries) GetApiKeyInfo(ctx context.Context, apiKey string) (GetApiKeyInfoRow, error) {
	row := q.db.QueryRow(ctx, getApiKeyInfo, apiKey)
	var i GetApiKeyInfoRow
	err := row.Scan(
		&i.BusinessID,
		&i.PickupAddress,
		&i.PickupCoords,
		&i.PickupInstructions,
		&i.PickupWindowStart,
		&i.PickupWindowEnd,
	)
	return i, err
}

const getQuoteKeyInfo = `-- name: GetQuoteKeyInfo :one
SELECT business_id, pickup_address, pickup_window_start, pickup_window_end
FROM shopify_api_config WHERE quote_key = $1 AND deleted_at IS NULL
`

type GetQuoteKeyInfoRow struct {
	BusinessID        int64              `json:"businessId"`
	PickupAddress     *string            `json:"pickupAddress"`
	PickupWindowStart pgtype.Timestamptz `json:"pickupWindowStart"`
	PickupWindowEnd   pgtype.Timestamptz `json:"pickupWindowEnd"`
}

func (q *Queries) GetQuoteKeyInfo(ctx context.Context, quoteKey string) (GetQuoteKeyInfoRow, error) {
	row := q.db.QueryRow(ctx, getQuoteKeyInfo, quoteKey)
	var i GetQuoteKeyInfoRow
	err := row.Scan(
		&i.BusinessID,
		&i.PickupAddress,
		&i.PickupWindowStart,
		&i.PickupWindowEnd,
	)
	return i, err
}
