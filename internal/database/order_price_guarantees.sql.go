// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: order_price_guarantees.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getOrderQuote = `-- name: GetOrderQuote :one
SELECT
    pickup_address,
    delivery_address,
    distance_meters,
    driving_seconds,
    price_options
FROM order_quote
WHERE
    user_id = $1 AND
    pickup_address = $2 AND
    delivery_address = $3 AND
    expires_at > NOW()
`

type GetOrderQuoteParams struct {
	UserID          int64  `json:"userId"`
	PickupAddress   string `json:"pickupAddress"`
	DeliveryAddress string `json:"deliveryAddress"`
}

type GetOrderQuoteRow struct {
	PickupAddress   string `json:"pickupAddress"`
	DeliveryAddress string `json:"deliveryAddress"`
	DistanceMeters  int32  `json:"distanceMeters"`
	DrivingSeconds  int32  `json:"drivingSeconds"`
	PriceOptions    []byte `json:"priceOptions"`
}

func (q *Queries) GetOrderQuote(ctx context.Context, arg GetOrderQuoteParams) (GetOrderQuoteRow, error) {
	row := q.db.QueryRow(ctx, getOrderQuote, arg.UserID, arg.PickupAddress, arg.DeliveryAddress)
	var i GetOrderQuoteRow
	err := row.Scan(
		&i.PickupAddress,
		&i.DeliveryAddress,
		&i.DistanceMeters,
		&i.DrivingSeconds,
		&i.PriceOptions,
	)
	return i, err
}

const upsertQuote = `-- name: UpsertQuote :exec
INSERT INTO order_quote(
    user_id,
    pickup_address,
    delivery_address,
    distance_meters,
    driving_seconds,
    price_options,
    expires_at
)
VALUES (
           $1,
           $2,
           $3,
           $4,
           $5,
           $6,
           $7 )
ON CONFLICT (delivery_address, pickup_address, user_id)
DO UPDATE SET
              distance_meters = excluded.distance_meters,
              driving_seconds = excluded.driving_seconds,
              price_options = excluded.price_options,
              expires_at = excluded.expires_at
`

type UpsertQuoteParams struct {
	UserID          int64              `json:"userId"`
	PickupAddress   string             `json:"pickupAddress"`
	DeliveryAddress string             `json:"deliveryAddress"`
	DistanceMeters  int32              `json:"distanceMeters"`
	DrivingSeconds  int32              `json:"drivingSeconds"`
	PriceOptions    []byte             `json:"priceOptions"`
	ExpiresAt       pgtype.Timestamptz `json:"expiresAt"`
}

func (q *Queries) UpsertQuote(ctx context.Context, arg UpsertQuoteParams) error {
	_, err := q.db.Exec(ctx, upsertQuote,
		arg.UserID,
		arg.PickupAddress,
		arg.DeliveryAddress,
		arg.DistanceMeters,
		arg.DrivingSeconds,
		arg.PriceOptions,
		arg.ExpiresAt,
	)
	return err
}
