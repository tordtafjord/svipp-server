### Set URL global variable
GET https://svipp.app

> {%
    // Comment out depending on testing production or dev on localhost
    //client.global.set("url", "https://svipp.app");
    client.global.set("url", "http://localhost:8081");
%}

### MAKE SURE TEST USER EXISTS
POST {{url}}/api/users
Content-Type: application/json
//Authorization: Bearer {{auth_token}}

{
  "name": "Rob",
  "phone": "{{$random.integer(10000000, 99999999)}}",
  "email": "test@mail.com",
  "password": "Password321",
  "device_token": null

}

### Create Random USER
POST {{url}}/api/users
Content-Type: application/json
//Authorization: Bearer {{auth_token}}

{
  "name": "Rob",
  "phone": "+47{{$random.integer(10000000, 99999999)}}",
  "email": "{{$random.email}}",
  "password": "Password321",
  "confirmPassword": "Password321",
  "deviceToken": null
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}


### Authentication wrong password
POST {{url}}/api/auth
Content-Type: application/json

{
  "email": "test@mail.com",
  "password": "Password3213",
  "deviceToken": null
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 401, "Response status is not 401");
    });
%}

### Authenticate and retrieve token
POST {{url}}/api/auth
Content-Type: application/json

{
  "email": "test@mail.com",
  "password": "Password321",
  "deviceToken": null
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        client.global.set("auth_token", response.body.token);
    });
%}

### Verify Token
GET {{url}}/api/verify-token
Content-Type: application/json
Authorization: Bearer {{auth_token}}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}


### Try driver verify-token
POST {{url}}/api/driver/verify-token
Content-Type: application/json
Authorization: Bearer {{auth_token}}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status !== 200, "Response status should not be 200");
    });
%}


### HEALTH
GET {{url}}/health
Content-Type: application/json

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

### Get Order Quote
POST {{url}}/api/orders/quote
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "pickupAddress": "Dusviksvinger 10C, 4028 Stavanger",
  "deliveryAddress": "Engøyklubben 30, 4077 Hundvåg"
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        var pickupAddress = response.body.pickupAddress;
        var deliveryAddress = response.body.deliveryAddress;
        var priceOptions = response.body.priceOptions.Prices;

        // Extract the first key from priceOptions
        var priceOption = Object.keys(priceOptions)[0];

        client.global.set("pickupAddress", pickupAddress);
        client.global.set("deliveryAddress", deliveryAddress);
        client.global.set("priceOption", priceOption);
    });
%}


### Create Order
POST {{url}}/api/orders
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "pickupAddress": "{{pickupAddress}}",
  "deliveryAddress": "{{deliveryAddress}}",
  "priceOption": "{{priceOption}}",
  "isSender": true,
  "phone" : "+4741290110"

}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 201, "Response status is not 201");
        var orderId = response.body.id;
        client.global.set("orderId", orderId);
    });
%}

### Confirm Order
POST {{url}}/api/orders/confirm
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "order_id": {{orderId}},
  "recipient_phone": "+4741290110"
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}


### Create Order Not Authenticated
POST {{url}}/api/orders
Content-Type: application/json

{
  "pickup_address_id": 1,
  "delivery_address_id": 2,
  "pickup_address": "Sandvedmarka 26, 4318 Sandnes",
  "delivery_address": "Sandvedmarka 46, 4318 Sandnes"
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 401, "Response status is not 401");
    });
%}

### Get Current Users Orders
GET {{url}}/api/orders/my
Authorization: Bearer {{auth_token}}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

### Get Current Users Orders Not Authenticated
GET {{url}}/api/orders/my

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 401, "Response status is not 401");
    });
%}


### Shopify callback url
POST {{url}}/api/shopify/callback
Content-Type: application/json

{
  "rate": {
    "origin": {
      "country": "NO",
      "postal_code": null,
      "province": null,
      "city": null,
      "name": null,
      "address1": null,
      "address2": null,
      "address3": null,
      "latitude": null,
      "longitude": null,
      "phone": null,
      "fax": null,
      "email": null,
      "address_type": null,
      "company_name": "svipp-solutions"
    },
    "destination": {
      "country": "NO",
      "postal_code": "0366",
      "province": null,
      "city": "Oslo",
      "name": "Tord Tafjord",
      "address1": "Ole Vigs Gate 21A",
      "address2": null,
      "address3": null,
      "latitude": null,
      "longitude": null,
      "phone": null,
      "fax": null,
      "email": null,
      "address_type": null,
      "company_name": null
    },
    "items": [
      {
        "name": "The Collection Snowboard: Liquid",
        "sku": "",
        "quantity": 1,
        "grams": 0,
        "price": 74995,
        "vendor": "Hydrogen Vendor",
        "requires_shipping": true,
        "taxable": true,
        "fulfillment_service": "manual",
        "properties": {},
        "product_id": 8452508188803,
        "variant_id": 44783075229827
      }
    ],
    "currency": "NOK",
    "locale": "en-NO"
  }
}







